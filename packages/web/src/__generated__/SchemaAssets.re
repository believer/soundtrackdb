/** This file is autogenerated by ReasonRelay and should not be modified manually. */
/**
 * ENUMS
 * Helpers for wrapping/unwrapping enums.
 */
module Enum_ComposersOrderBy: {
  type t = [
    | `NATURAL
    | `ID_ASC
    | `ID_DESC
    | `FIRST_NAME_ASC
    | `FIRST_NAME_DESC
    | `LAST_NAME_ASC
    | `LAST_NAME_DESC
    | `CREATED_AT_ASC
    | `CREATED_AT_DESC
    | `UPDATED_AT_ASC
    | `UPDATED_AT_DESC
    | `PRIMARY_KEY_ASC
    | `PRIMARY_KEY_DESC
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `NATURAL
    | `ID_ASC
    | `ID_DESC
    | `FIRST_NAME_ASC
    | `FIRST_NAME_DESC
    | `LAST_NAME_ASC
    | `LAST_NAME_DESC
    | `CREATED_AT_ASC
    | `CREATED_AT_DESC
    | `UPDATED_AT_ASC
    | `UPDATED_AT_DESC
    | `PRIMARY_KEY_ASC
    | `PRIMARY_KEY_DESC
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "NATURAL" => `NATURAL
    | "ID_ASC" => `ID_ASC
    | "ID_DESC" => `ID_DESC
    | "FIRST_NAME_ASC" => `FIRST_NAME_ASC
    | "FIRST_NAME_DESC" => `FIRST_NAME_DESC
    | "LAST_NAME_ASC" => `LAST_NAME_ASC
    | "LAST_NAME_DESC" => `LAST_NAME_DESC
    | "CREATED_AT_ASC" => `CREATED_AT_ASC
    | "CREATED_AT_DESC" => `CREATED_AT_DESC
    | "UPDATED_AT_ASC" => `UPDATED_AT_ASC
    | "UPDATED_AT_DESC" => `UPDATED_AT_DESC
    | "PRIMARY_KEY_ASC" => `PRIMARY_KEY_ASC
    | "PRIMARY_KEY_DESC" => `PRIMARY_KEY_DESC
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `NATURAL => "NATURAL"
      | `ID_ASC => "ID_ASC"
      | `ID_DESC => "ID_DESC"
      | `FIRST_NAME_ASC => "FIRST_NAME_ASC"
      | `FIRST_NAME_DESC => "FIRST_NAME_DESC"
      | `LAST_NAME_ASC => "LAST_NAME_ASC"
      | `LAST_NAME_DESC => "LAST_NAME_DESC"
      | `CREATED_AT_ASC => "CREATED_AT_ASC"
      | `CREATED_AT_DESC => "CREATED_AT_DESC"
      | `UPDATED_AT_ASC => "UPDATED_AT_ASC"
      | `UPDATED_AT_DESC => "UPDATED_AT_DESC"
      | `PRIMARY_KEY_ASC => "PRIMARY_KEY_ASC"
      | `PRIMARY_KEY_DESC => "PRIMARY_KEY_DESC"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_SoundtrackComposersOrderBy: {
  type t = [
    | `NATURAL
    | `COMPOSER_ID_ASC
    | `COMPOSER_ID_DESC
    | `SOUNDTRACK_ID_ASC
    | `SOUNDTRACK_ID_DESC
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `NATURAL
    | `COMPOSER_ID_ASC
    | `COMPOSER_ID_DESC
    | `SOUNDTRACK_ID_ASC
    | `SOUNDTRACK_ID_DESC
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "NATURAL" => `NATURAL
    | "COMPOSER_ID_ASC" => `COMPOSER_ID_ASC
    | "COMPOSER_ID_DESC" => `COMPOSER_ID_DESC
    | "SOUNDTRACK_ID_ASC" => `SOUNDTRACK_ID_ASC
    | "SOUNDTRACK_ID_DESC" => `SOUNDTRACK_ID_DESC
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `NATURAL => "NATURAL"
      | `COMPOSER_ID_ASC => "COMPOSER_ID_ASC"
      | `COMPOSER_ID_DESC => "COMPOSER_ID_DESC"
      | `SOUNDTRACK_ID_ASC => "SOUNDTRACK_ID_ASC"
      | `SOUNDTRACK_ID_DESC => "SOUNDTRACK_ID_DESC"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_SoundtrackType: {
  type t = [ | `GAME | `MOVIE | `FUTURE_ADDED_VALUE__];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [ | `GAME | `MOVIE | `FUTURE_ADDED_VALUE__];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "GAME" => `GAME
    | "MOVIE" => `MOVIE
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `GAME => "GAME"
      | `MOVIE => "MOVIE"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_TracksOrderBy: {
  type t = [
    | `NATURAL
    | `ID_ASC
    | `ID_DESC
    | `TITLE_ASC
    | `TITLE_DESC
    | `DURATION_ASC
    | `DURATION_DESC
    | `SOUNDTRACK_ID_ASC
    | `SOUNDTRACK_ID_DESC
    | `TRACK_NUMBER_ASC
    | `TRACK_NUMBER_DESC
    | `CREATED_AT_ASC
    | `CREATED_AT_DESC
    | `UPDATED_AT_ASC
    | `UPDATED_AT_DESC
    | `PRIMARY_KEY_ASC
    | `PRIMARY_KEY_DESC
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `NATURAL
    | `ID_ASC
    | `ID_DESC
    | `TITLE_ASC
    | `TITLE_DESC
    | `DURATION_ASC
    | `DURATION_DESC
    | `SOUNDTRACK_ID_ASC
    | `SOUNDTRACK_ID_DESC
    | `TRACK_NUMBER_ASC
    | `TRACK_NUMBER_DESC
    | `CREATED_AT_ASC
    | `CREATED_AT_DESC
    | `UPDATED_AT_ASC
    | `UPDATED_AT_DESC
    | `PRIMARY_KEY_ASC
    | `PRIMARY_KEY_DESC
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "NATURAL" => `NATURAL
    | "ID_ASC" => `ID_ASC
    | "ID_DESC" => `ID_DESC
    | "TITLE_ASC" => `TITLE_ASC
    | "TITLE_DESC" => `TITLE_DESC
    | "DURATION_ASC" => `DURATION_ASC
    | "DURATION_DESC" => `DURATION_DESC
    | "SOUNDTRACK_ID_ASC" => `SOUNDTRACK_ID_ASC
    | "SOUNDTRACK_ID_DESC" => `SOUNDTRACK_ID_DESC
    | "TRACK_NUMBER_ASC" => `TRACK_NUMBER_ASC
    | "TRACK_NUMBER_DESC" => `TRACK_NUMBER_DESC
    | "CREATED_AT_ASC" => `CREATED_AT_ASC
    | "CREATED_AT_DESC" => `CREATED_AT_DESC
    | "UPDATED_AT_ASC" => `UPDATED_AT_ASC
    | "UPDATED_AT_DESC" => `UPDATED_AT_DESC
    | "PRIMARY_KEY_ASC" => `PRIMARY_KEY_ASC
    | "PRIMARY_KEY_DESC" => `PRIMARY_KEY_DESC
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `NATURAL => "NATURAL"
      | `ID_ASC => "ID_ASC"
      | `ID_DESC => "ID_DESC"
      | `TITLE_ASC => "TITLE_ASC"
      | `TITLE_DESC => "TITLE_DESC"
      | `DURATION_ASC => "DURATION_ASC"
      | `DURATION_DESC => "DURATION_DESC"
      | `SOUNDTRACK_ID_ASC => "SOUNDTRACK_ID_ASC"
      | `SOUNDTRACK_ID_DESC => "SOUNDTRACK_ID_DESC"
      | `TRACK_NUMBER_ASC => "TRACK_NUMBER_ASC"
      | `TRACK_NUMBER_DESC => "TRACK_NUMBER_DESC"
      | `CREATED_AT_ASC => "CREATED_AT_ASC"
      | `CREATED_AT_DESC => "CREATED_AT_DESC"
      | `UPDATED_AT_ASC => "UPDATED_AT_ASC"
      | `UPDATED_AT_DESC => "UPDATED_AT_DESC"
      | `PRIMARY_KEY_ASC => "PRIMARY_KEY_ASC"
      | `PRIMARY_KEY_DESC => "PRIMARY_KEY_DESC"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_TrackComposersOrderBy: {
  type t = [
    | `NATURAL
    | `TRACK_ID_ASC
    | `TRACK_ID_DESC
    | `COMPOSER_ID_ASC
    | `COMPOSER_ID_DESC
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `NATURAL
    | `TRACK_ID_ASC
    | `TRACK_ID_DESC
    | `COMPOSER_ID_ASC
    | `COMPOSER_ID_DESC
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "NATURAL" => `NATURAL
    | "TRACK_ID_ASC" => `TRACK_ID_ASC
    | "TRACK_ID_DESC" => `TRACK_ID_DESC
    | "COMPOSER_ID_ASC" => `COMPOSER_ID_ASC
    | "COMPOSER_ID_DESC" => `COMPOSER_ID_DESC
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `NATURAL => "NATURAL"
      | `TRACK_ID_ASC => "TRACK_ID_ASC"
      | `TRACK_ID_DESC => "TRACK_ID_DESC"
      | `COMPOSER_ID_ASC => "COMPOSER_ID_ASC"
      | `COMPOSER_ID_DESC => "COMPOSER_ID_DESC"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_PgmigrationsOrderBy: {
  type t = [
    | `NATURAL
    | `ID_ASC
    | `ID_DESC
    | `NAME_ASC
    | `NAME_DESC
    | `RUN_ON_ASC
    | `RUN_ON_DESC
    | `PRIMARY_KEY_ASC
    | `PRIMARY_KEY_DESC
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `NATURAL
    | `ID_ASC
    | `ID_DESC
    | `NAME_ASC
    | `NAME_DESC
    | `RUN_ON_ASC
    | `RUN_ON_DESC
    | `PRIMARY_KEY_ASC
    | `PRIMARY_KEY_DESC
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "NATURAL" => `NATURAL
    | "ID_ASC" => `ID_ASC
    | "ID_DESC" => `ID_DESC
    | "NAME_ASC" => `NAME_ASC
    | "NAME_DESC" => `NAME_DESC
    | "RUN_ON_ASC" => `RUN_ON_ASC
    | "RUN_ON_DESC" => `RUN_ON_DESC
    | "PRIMARY_KEY_ASC" => `PRIMARY_KEY_ASC
    | "PRIMARY_KEY_DESC" => `PRIMARY_KEY_DESC
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `NATURAL => "NATURAL"
      | `ID_ASC => "ID_ASC"
      | `ID_DESC => "ID_DESC"
      | `NAME_ASC => "NAME_ASC"
      | `NAME_DESC => "NAME_DESC"
      | `RUN_ON_ASC => "RUN_ON_ASC"
      | `RUN_ON_DESC => "RUN_ON_DESC"
      | `PRIMARY_KEY_ASC => "PRIMARY_KEY_ASC"
      | `PRIMARY_KEY_DESC => "PRIMARY_KEY_DESC"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};

module Enum_SoundtracksOrderBy: {
  type t = [
    | `NATURAL
    | `ID_ASC
    | `ID_DESC
    | `TITLE_ASC
    | `TITLE_DESC
    | `IMDB_ID_ASC
    | `IMDB_ID_DESC
    | `SOUNDTRACK_TYPE_ASC
    | `SOUNDTRACK_TYPE_DESC
    | `RELEASE_YEAR_ASC
    | `RELEASE_YEAR_DESC
    | `CREATED_AT_ASC
    | `CREATED_AT_DESC
    | `UPDATED_AT_ASC
    | `UPDATED_AT_DESC
    | `PRIMARY_KEY_ASC
    | `PRIMARY_KEY_DESC
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;
  let unwrap: wrapped => t;
  let wrap: t => wrapped;
  let toString: t => string;
  let fromString: string => t;
} = {
  type t = [
    | `NATURAL
    | `ID_ASC
    | `ID_DESC
    | `TITLE_ASC
    | `TITLE_DESC
    | `IMDB_ID_ASC
    | `IMDB_ID_DESC
    | `SOUNDTRACK_TYPE_ASC
    | `SOUNDTRACK_TYPE_DESC
    | `RELEASE_YEAR_ASC
    | `RELEASE_YEAR_DESC
    | `CREATED_AT_ASC
    | `CREATED_AT_DESC
    | `UPDATED_AT_ASC
    | `UPDATED_AT_DESC
    | `PRIMARY_KEY_ASC
    | `PRIMARY_KEY_DESC
    | `FUTURE_ADDED_VALUE__
  ];
  type wrapped;

  external __unwrap: wrapped => string = "%identity";
  external __wrap: string => wrapped = "%identity";

  let unwrap = wrapped =>
    switch (wrapped |> __unwrap) {
    | "NATURAL" => `NATURAL
    | "ID_ASC" => `ID_ASC
    | "ID_DESC" => `ID_DESC
    | "TITLE_ASC" => `TITLE_ASC
    | "TITLE_DESC" => `TITLE_DESC
    | "IMDB_ID_ASC" => `IMDB_ID_ASC
    | "IMDB_ID_DESC" => `IMDB_ID_DESC
    | "SOUNDTRACK_TYPE_ASC" => `SOUNDTRACK_TYPE_ASC
    | "SOUNDTRACK_TYPE_DESC" => `SOUNDTRACK_TYPE_DESC
    | "RELEASE_YEAR_ASC" => `RELEASE_YEAR_ASC
    | "RELEASE_YEAR_DESC" => `RELEASE_YEAR_DESC
    | "CREATED_AT_ASC" => `CREATED_AT_ASC
    | "CREATED_AT_DESC" => `CREATED_AT_DESC
    | "UPDATED_AT_ASC" => `UPDATED_AT_ASC
    | "UPDATED_AT_DESC" => `UPDATED_AT_DESC
    | "PRIMARY_KEY_ASC" => `PRIMARY_KEY_ASC
    | "PRIMARY_KEY_DESC" => `PRIMARY_KEY_DESC
    | _ => `FUTURE_ADDED_VALUE__
    };

  let wrap = t =>
    (
      switch (t) {
      | `NATURAL => "NATURAL"
      | `ID_ASC => "ID_ASC"
      | `ID_DESC => "ID_DESC"
      | `TITLE_ASC => "TITLE_ASC"
      | `TITLE_DESC => "TITLE_DESC"
      | `IMDB_ID_ASC => "IMDB_ID_ASC"
      | `IMDB_ID_DESC => "IMDB_ID_DESC"
      | `SOUNDTRACK_TYPE_ASC => "SOUNDTRACK_TYPE_ASC"
      | `SOUNDTRACK_TYPE_DESC => "SOUNDTRACK_TYPE_DESC"
      | `RELEASE_YEAR_ASC => "RELEASE_YEAR_ASC"
      | `RELEASE_YEAR_DESC => "RELEASE_YEAR_DESC"
      | `CREATED_AT_ASC => "CREATED_AT_ASC"
      | `CREATED_AT_DESC => "CREATED_AT_DESC"
      | `UPDATED_AT_ASC => "UPDATED_AT_ASC"
      | `UPDATED_AT_DESC => "UPDATED_AT_DESC"
      | `PRIMARY_KEY_ASC => "PRIMARY_KEY_ASC"
      | `PRIMARY_KEY_DESC => "PRIMARY_KEY_DESC"
      | `FUTURE_ADDED_VALUE__ => ""
      }
    )
    |> __wrap;

  let toString = t => t |> wrap |> __unwrap;
  let fromString = str => str |> __wrap |> unwrap;
};
