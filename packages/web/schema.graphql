type Composer implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: Int!
  firstName: String!
  lastName: String
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads and enables pagination through a set of `SoundtrackComposer`."""
  soundtrackComposersByComposerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SoundtrackComposer`."""
    orderBy: [SoundtrackComposersOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SoundtrackComposerCondition
  ): SoundtrackComposersConnection!

  """Reads and enables pagination through a set of `TrackComposer`."""
  trackComposersByComposerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TrackComposer`."""
    orderBy: [TrackComposersOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TrackComposerCondition
  ): TrackComposersConnection!
  fullName: String
}

"""
A condition to be used against `Composer` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ComposerCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `firstName` field."""
  firstName: String

  """Checks for equality with the object’s `lastName` field."""
  lastName: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `Composer`"""
input ComposerInput {
  rowId: Int
  firstName: String!
  lastName: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `Composer`. Fields that are set will be updated.
"""
input ComposerPatch {
  rowId: Int
  firstName: String
  lastName: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `Composer` values."""
type ComposersConnection {
  """A list of `Composer` objects."""
  nodes: [Composer]!

  """
  A list of edges which contains the `Composer` and cursor to aid in pagination.
  """
  edges: [ComposersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Composer` you could get from the connection."""
  totalCount: Int!
}

"""A `Composer` edge in the connection."""
type ComposersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Composer` at the end of the edge."""
  node: Composer
}

"""Methods to use when ordering `Composer`."""
enum ComposersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the create `Composer` mutation."""
input CreateComposerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Composer` to be created by this mutation."""
  composer: ComposerInput!
}

"""The output of our create `Composer` mutation."""
type CreateComposerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Composer` that was created by this mutation."""
  composer: Composer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Composer`. May be used by Relay 1."""
  composerEdge(
    """The method to use when ordering `Composer`."""
    orderBy: [ComposersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ComposersEdge
}

"""All input for the create `Pgmigration` mutation."""
input CreatePgmigrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Pgmigration` to be created by this mutation."""
  pgmigration: PgmigrationInput!
}

"""The output of our create `Pgmigration` mutation."""
type CreatePgmigrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Pgmigration` that was created by this mutation."""
  pgmigration: Pgmigration

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Pgmigration`. May be used by Relay 1."""
  pgmigrationEdge(
    """The method to use when ordering `Pgmigration`."""
    orderBy: [PgmigrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PgmigrationsEdge
}

"""All input for the create `SoundtrackComposer` mutation."""
input CreateSoundtrackComposerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SoundtrackComposer` to be created by this mutation."""
  soundtrackComposer: SoundtrackComposerInput!
}

"""The output of our create `SoundtrackComposer` mutation."""
type CreateSoundtrackComposerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SoundtrackComposer` that was created by this mutation."""
  soundtrackComposer: SoundtrackComposer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Composer` that is related to this `SoundtrackComposer`.
  """
  composerByComposerId: Composer

  """
  Reads a single `Soundtrack` that is related to this `SoundtrackComposer`.
  """
  soundtrackBySoundtrackId: Soundtrack

  """An edge for our `SoundtrackComposer`. May be used by Relay 1."""
  soundtrackComposerEdge(
    """The method to use when ordering `SoundtrackComposer`."""
    orderBy: [SoundtrackComposersOrderBy!] = [NATURAL]
  ): SoundtrackComposersEdge
}

"""All input for the create `Soundtrack` mutation."""
input CreateSoundtrackInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Soundtrack` to be created by this mutation."""
  soundtrack: SoundtrackInput!
}

"""The output of our create `Soundtrack` mutation."""
type CreateSoundtrackPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Soundtrack` that was created by this mutation."""
  soundtrack: Soundtrack

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Soundtrack`. May be used by Relay 1."""
  soundtrackEdge(
    """The method to use when ordering `Soundtrack`."""
    orderBy: [SoundtracksOrderBy!] = [PRIMARY_KEY_ASC]
  ): SoundtracksEdge
}

"""All input for the create `TrackComposer` mutation."""
input CreateTrackComposerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TrackComposer` to be created by this mutation."""
  trackComposer: TrackComposerInput!
}

"""The output of our create `TrackComposer` mutation."""
type CreateTrackComposerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TrackComposer` that was created by this mutation."""
  trackComposer: TrackComposer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Track` that is related to this `TrackComposer`."""
  trackByTrackId: Track

  """Reads a single `Composer` that is related to this `TrackComposer`."""
  composerByComposerId: Composer

  """An edge for our `TrackComposer`. May be used by Relay 1."""
  trackComposerEdge(
    """The method to use when ordering `TrackComposer`."""
    orderBy: [TrackComposersOrderBy!] = [NATURAL]
  ): TrackComposersEdge
}

"""All input for the create `Track` mutation."""
input CreateTrackInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Track` to be created by this mutation."""
  track: TrackInput!
}

"""The output of our create `Track` mutation."""
type CreateTrackPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Track` that was created by this mutation."""
  track: Track

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Soundtrack` that is related to this `Track`."""
  soundtrackBySoundtrackId: Soundtrack

  """An edge for our `Track`. May be used by Relay 1."""
  trackEdge(
    """The method to use when ordering `Track`."""
    orderBy: [TracksOrderBy!] = [PRIMARY_KEY_ASC]
  ): TracksEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteComposerByRowId` mutation."""
input DeleteComposerByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""All input for the `deleteComposer` mutation."""
input DeleteComposerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Composer` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Composer` mutation."""
type DeleteComposerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Composer` that was deleted by this mutation."""
  composer: Composer
  deletedComposerId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Composer`. May be used by Relay 1."""
  composerEdge(
    """The method to use when ordering `Composer`."""
    orderBy: [ComposersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ComposersEdge
}

"""All input for the `deletePgmigrationByRowId` mutation."""
input DeletePgmigrationByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""All input for the `deletePgmigration` mutation."""
input DeletePgmigrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Pgmigration` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Pgmigration` mutation."""
type DeletePgmigrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Pgmigration` that was deleted by this mutation."""
  pgmigration: Pgmigration
  deletedPgmigrationId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Pgmigration`. May be used by Relay 1."""
  pgmigrationEdge(
    """The method to use when ordering `Pgmigration`."""
    orderBy: [PgmigrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PgmigrationsEdge
}

"""All input for the `deleteSoundtrackByRowId` mutation."""
input DeleteSoundtrackByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""All input for the `deleteSoundtrack` mutation."""
input DeleteSoundtrackInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Soundtrack` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Soundtrack` mutation."""
type DeleteSoundtrackPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Soundtrack` that was deleted by this mutation."""
  soundtrack: Soundtrack
  deletedSoundtrackId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Soundtrack`. May be used by Relay 1."""
  soundtrackEdge(
    """The method to use when ordering `Soundtrack`."""
    orderBy: [SoundtracksOrderBy!] = [PRIMARY_KEY_ASC]
  ): SoundtracksEdge
}

"""All input for the `deleteTrackByRowId` mutation."""
input DeleteTrackByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""All input for the `deleteTrack` mutation."""
input DeleteTrackInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Track` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Track` mutation."""
type DeleteTrackPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Track` that was deleted by this mutation."""
  track: Track
  deletedTrackId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Soundtrack` that is related to this `Track`."""
  soundtrackBySoundtrackId: Soundtrack

  """An edge for our `Track`. May be used by Relay 1."""
  trackEdge(
    """The method to use when ordering `Track`."""
    orderBy: [TracksOrderBy!] = [PRIMARY_KEY_ASC]
  ): TracksEdge
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Composer`."""
  createComposer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateComposerInput!
  ): CreateComposerPayload

  """Creates a single `Pgmigration`."""
  createPgmigration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePgmigrationInput!
  ): CreatePgmigrationPayload

  """Creates a single `Soundtrack`."""
  createSoundtrack(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSoundtrackInput!
  ): CreateSoundtrackPayload

  """Creates a single `SoundtrackComposer`."""
  createSoundtrackComposer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSoundtrackComposerInput!
  ): CreateSoundtrackComposerPayload

  """Creates a single `Track`."""
  createTrack(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTrackInput!
  ): CreateTrackPayload

  """Creates a single `TrackComposer`."""
  createTrackComposer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTrackComposerInput!
  ): CreateTrackComposerPayload

  """Updates a single `Composer` using its globally unique id and a patch."""
  updateComposer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateComposerInput!
  ): UpdateComposerPayload

  """Updates a single `Composer` using a unique key and a patch."""
  updateComposerByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateComposerByRowIdInput!
  ): UpdateComposerPayload

  """
  Updates a single `Pgmigration` using its globally unique id and a patch.
  """
  updatePgmigration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePgmigrationInput!
  ): UpdatePgmigrationPayload

  """Updates a single `Pgmigration` using a unique key and a patch."""
  updatePgmigrationByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePgmigrationByRowIdInput!
  ): UpdatePgmigrationPayload

  """
  Updates a single `Soundtrack` using its globally unique id and a patch.
  """
  updateSoundtrack(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSoundtrackInput!
  ): UpdateSoundtrackPayload

  """Updates a single `Soundtrack` using a unique key and a patch."""
  updateSoundtrackByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSoundtrackByRowIdInput!
  ): UpdateSoundtrackPayload

  """Updates a single `Track` using its globally unique id and a patch."""
  updateTrack(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTrackInput!
  ): UpdateTrackPayload

  """Updates a single `Track` using a unique key and a patch."""
  updateTrackByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTrackByRowIdInput!
  ): UpdateTrackPayload

  """Deletes a single `Composer` using its globally unique id."""
  deleteComposer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteComposerInput!
  ): DeleteComposerPayload

  """Deletes a single `Composer` using a unique key."""
  deleteComposerByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteComposerByRowIdInput!
  ): DeleteComposerPayload

  """Deletes a single `Pgmigration` using its globally unique id."""
  deletePgmigration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePgmigrationInput!
  ): DeletePgmigrationPayload

  """Deletes a single `Pgmigration` using a unique key."""
  deletePgmigrationByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePgmigrationByRowIdInput!
  ): DeletePgmigrationPayload

  """Deletes a single `Soundtrack` using its globally unique id."""
  deleteSoundtrack(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSoundtrackInput!
  ): DeleteSoundtrackPayload

  """Deletes a single `Soundtrack` using a unique key."""
  deleteSoundtrackByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSoundtrackByRowIdInput!
  ): DeleteSoundtrackPayload

  """Deletes a single `Track` using its globally unique id."""
  deleteTrack(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTrackInput!
  ): DeleteTrackPayload

  """Deletes a single `Track` using a unique key."""
  deleteTrackByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTrackByRowIdInput!
  ): DeleteTrackPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

type Pgmigration implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: Int!
  name: String!
  runOn: Datetime!
}

"""
A condition to be used against `Pgmigration` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input PgmigrationCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `runOn` field."""
  runOn: Datetime
}

"""An input for mutations affecting `Pgmigration`"""
input PgmigrationInput {
  rowId: Int
  name: String!
  runOn: Datetime!
}

"""
Represents an update to a `Pgmigration`. Fields that are set will be updated.
"""
input PgmigrationPatch {
  rowId: Int
  name: String
  runOn: Datetime
}

"""A connection to a list of `Pgmigration` values."""
type PgmigrationsConnection {
  """A list of `Pgmigration` objects."""
  nodes: [Pgmigration]!

  """
  A list of edges which contains the `Pgmigration` and cursor to aid in pagination.
  """
  edges: [PgmigrationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Pgmigration` you could get from the connection."""
  totalCount: Int!
}

"""A `Pgmigration` edge in the connection."""
type PgmigrationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Pgmigration` at the end of the edge."""
  node: Pgmigration
}

"""Methods to use when ordering `Pgmigration`."""
enum PgmigrationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  RUN_ON_ASC
  RUN_ON_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  id: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    id: ID!
  ): Node

  """Reads and enables pagination through a set of `Composer`."""
  allComposers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Composer`."""
    orderBy: [ComposersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ComposerCondition
  ): ComposersConnection

  """Reads and enables pagination through a set of `Pgmigration`."""
  allPgmigrations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Pgmigration`."""
    orderBy: [PgmigrationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PgmigrationCondition
  ): PgmigrationsConnection

  """Reads and enables pagination through a set of `Soundtrack`."""
  allSoundtracks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Soundtrack`."""
    orderBy: [SoundtracksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SoundtrackCondition
  ): SoundtracksConnection

  """Reads and enables pagination through a set of `SoundtrackComposer`."""
  allSoundtrackComposers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SoundtrackComposer`."""
    orderBy: [SoundtrackComposersOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SoundtrackComposerCondition
  ): SoundtrackComposersConnection

  """Reads and enables pagination through a set of `Track`."""
  allTracks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Track`."""
    orderBy: [TracksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TrackCondition
  ): TracksConnection

  """Reads and enables pagination through a set of `TrackComposer`."""
  allTrackComposers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TrackComposer`."""
    orderBy: [TrackComposersOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TrackComposerCondition
  ): TrackComposersConnection
  composerByRowId(rowId: Int!): Composer
  pgmigrationByRowId(rowId: Int!): Pgmigration
  soundtrackByRowId(rowId: Int!): Soundtrack
  trackByRowId(rowId: Int!): Track

  """Reads and enables pagination through a set of `Soundtrack`."""
  search(
    query: String

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): SoundtracksConnection!

  """Reads a single `Composer` using its globally unique `ID`."""
  composer(
    """The globally unique `ID` to be used in selecting a single `Composer`."""
    id: ID!
  ): Composer

  """Reads a single `Pgmigration` using its globally unique `ID`."""
  pgmigration(
    """
    The globally unique `ID` to be used in selecting a single `Pgmigration`.
    """
    id: ID!
  ): Pgmigration

  """Reads a single `Soundtrack` using its globally unique `ID`."""
  soundtrack(
    """
    The globally unique `ID` to be used in selecting a single `Soundtrack`.
    """
    id: ID!
  ): Soundtrack

  """Reads a single `Track` using its globally unique `ID`."""
  track(
    """The globally unique `ID` to be used in selecting a single `Track`."""
    id: ID!
  ): Track
}

type Soundtrack implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: Int!
  title: String!
  imdbId: String!
  soundtrackType: SoundtrackType!
  releaseYear: Datetime!
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads and enables pagination through a set of `SoundtrackComposer`."""
  soundtrackComposersBySoundtrackId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SoundtrackComposer`."""
    orderBy: [SoundtrackComposersOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SoundtrackComposerCondition
  ): SoundtrackComposersConnection!

  """Reads and enables pagination through a set of `Track`."""
  tracksBySoundtrackId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Track`."""
    orderBy: [TracksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TrackCondition
  ): TracksConnection!
}

type SoundtrackComposer {
  composerId: Int!
  soundtrackId: Int!

  """
  Reads a single `Composer` that is related to this `SoundtrackComposer`.
  """
  composerByComposerId: Composer

  """
  Reads a single `Soundtrack` that is related to this `SoundtrackComposer`.
  """
  soundtrackBySoundtrackId: Soundtrack
}

"""
A condition to be used against `SoundtrackComposer` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SoundtrackComposerCondition {
  """Checks for equality with the object’s `composerId` field."""
  composerId: Int

  """Checks for equality with the object’s `soundtrackId` field."""
  soundtrackId: Int
}

"""An input for mutations affecting `SoundtrackComposer`"""
input SoundtrackComposerInput {
  composerId: Int!
  soundtrackId: Int!
}

"""A connection to a list of `SoundtrackComposer` values."""
type SoundtrackComposersConnection {
  """A list of `SoundtrackComposer` objects."""
  nodes: [SoundtrackComposer]!

  """
  A list of edges which contains the `SoundtrackComposer` and cursor to aid in pagination.
  """
  edges: [SoundtrackComposersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SoundtrackComposer` you could get from the connection.
  """
  totalCount: Int!
}

"""A `SoundtrackComposer` edge in the connection."""
type SoundtrackComposersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SoundtrackComposer` at the end of the edge."""
  node: SoundtrackComposer
}

"""Methods to use when ordering `SoundtrackComposer`."""
enum SoundtrackComposersOrderBy {
  NATURAL
  COMPOSER_ID_ASC
  COMPOSER_ID_DESC
  SOUNDTRACK_ID_ASC
  SOUNDTRACK_ID_DESC
}

"""
A condition to be used against `Soundtrack` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SoundtrackCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `imdbId` field."""
  imdbId: String

  """Checks for equality with the object’s `soundtrackType` field."""
  soundtrackType: SoundtrackType

  """Checks for equality with the object’s `releaseYear` field."""
  releaseYear: Datetime

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `Soundtrack`"""
input SoundtrackInput {
  rowId: Int
  title: String!
  imdbId: String!
  soundtrackType: SoundtrackType!
  releaseYear: Datetime!
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `Soundtrack`. Fields that are set will be updated.
"""
input SoundtrackPatch {
  rowId: Int
  title: String
  imdbId: String
  soundtrackType: SoundtrackType
  releaseYear: Datetime
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `Soundtrack` values."""
type SoundtracksConnection {
  """A list of `Soundtrack` objects."""
  nodes: [Soundtrack]!

  """
  A list of edges which contains the `Soundtrack` and cursor to aid in pagination.
  """
  edges: [SoundtracksEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Soundtrack` you could get from the connection."""
  totalCount: Int!
}

"""A `Soundtrack` edge in the connection."""
type SoundtracksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Soundtrack` at the end of the edge."""
  node: Soundtrack
}

"""Methods to use when ordering `Soundtrack`."""
enum SoundtracksOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TITLE_ASC
  TITLE_DESC
  IMDB_ID_ASC
  IMDB_ID_DESC
  SOUNDTRACK_TYPE_ASC
  SOUNDTRACK_TYPE_DESC
  RELEASE_YEAR_ASC
  RELEASE_YEAR_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

enum SoundtrackType {
  GAME
  MOVIE
}

type Track implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: Int!
  title: String!
  duration: Int!
  soundtrackId: Int!
  trackNumber: Int!
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single `Soundtrack` that is related to this `Track`."""
  soundtrackBySoundtrackId: Soundtrack

  """Reads and enables pagination through a set of `TrackComposer`."""
  trackComposersByTrackId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TrackComposer`."""
    orderBy: [TrackComposersOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TrackComposerCondition
  ): TrackComposersConnection!
}

type TrackComposer {
  trackId: Int!
  composerId: Int!

  """Reads a single `Track` that is related to this `TrackComposer`."""
  trackByTrackId: Track

  """Reads a single `Composer` that is related to this `TrackComposer`."""
  composerByComposerId: Composer
}

"""
A condition to be used against `TrackComposer` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TrackComposerCondition {
  """Checks for equality with the object’s `trackId` field."""
  trackId: Int

  """Checks for equality with the object’s `composerId` field."""
  composerId: Int
}

"""An input for mutations affecting `TrackComposer`"""
input TrackComposerInput {
  trackId: Int!
  composerId: Int!
}

"""A connection to a list of `TrackComposer` values."""
type TrackComposersConnection {
  """A list of `TrackComposer` objects."""
  nodes: [TrackComposer]!

  """
  A list of edges which contains the `TrackComposer` and cursor to aid in pagination.
  """
  edges: [TrackComposersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `TrackComposer` you could get from the connection."""
  totalCount: Int!
}

"""A `TrackComposer` edge in the connection."""
type TrackComposersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TrackComposer` at the end of the edge."""
  node: TrackComposer
}

"""Methods to use when ordering `TrackComposer`."""
enum TrackComposersOrderBy {
  NATURAL
  TRACK_ID_ASC
  TRACK_ID_DESC
  COMPOSER_ID_ASC
  COMPOSER_ID_DESC
}

"""
A condition to be used against `Track` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TrackCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `duration` field."""
  duration: Int

  """Checks for equality with the object’s `soundtrackId` field."""
  soundtrackId: Int

  """Checks for equality with the object’s `trackNumber` field."""
  trackNumber: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `Track`"""
input TrackInput {
  rowId: Int
  title: String!
  duration: Int!
  soundtrackId: Int!
  trackNumber: Int!
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `Track`. Fields that are set will be updated.
"""
input TrackPatch {
  rowId: Int
  title: String
  duration: Int
  soundtrackId: Int
  trackNumber: Int
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `Track` values."""
type TracksConnection {
  """A list of `Track` objects."""
  nodes: [Track]!

  """
  A list of edges which contains the `Track` and cursor to aid in pagination.
  """
  edges: [TracksEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Track` you could get from the connection."""
  totalCount: Int!
}

"""A `Track` edge in the connection."""
type TracksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Track` at the end of the edge."""
  node: Track
}

"""Methods to use when ordering `Track`."""
enum TracksOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TITLE_ASC
  TITLE_DESC
  DURATION_ASC
  DURATION_DESC
  SOUNDTRACK_ID_ASC
  SOUNDTRACK_ID_DESC
  TRACK_NUMBER_ASC
  TRACK_NUMBER_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the `updateComposerByRowId` mutation."""
input UpdateComposerByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Composer` being updated.
  """
  composerPatch: ComposerPatch!
  rowId: Int!
}

"""All input for the `updateComposer` mutation."""
input UpdateComposerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Composer` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Composer` being updated.
  """
  composerPatch: ComposerPatch!
}

"""The output of our update `Composer` mutation."""
type UpdateComposerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Composer` that was updated by this mutation."""
  composer: Composer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Composer`. May be used by Relay 1."""
  composerEdge(
    """The method to use when ordering `Composer`."""
    orderBy: [ComposersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ComposersEdge
}

"""All input for the `updatePgmigrationByRowId` mutation."""
input UpdatePgmigrationByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Pgmigration` being updated.
  """
  pgmigrationPatch: PgmigrationPatch!
  rowId: Int!
}

"""All input for the `updatePgmigration` mutation."""
input UpdatePgmigrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Pgmigration` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Pgmigration` being updated.
  """
  pgmigrationPatch: PgmigrationPatch!
}

"""The output of our update `Pgmigration` mutation."""
type UpdatePgmigrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Pgmigration` that was updated by this mutation."""
  pgmigration: Pgmigration

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Pgmigration`. May be used by Relay 1."""
  pgmigrationEdge(
    """The method to use when ordering `Pgmigration`."""
    orderBy: [PgmigrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PgmigrationsEdge
}

"""All input for the `updateSoundtrackByRowId` mutation."""
input UpdateSoundtrackByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Soundtrack` being updated.
  """
  soundtrackPatch: SoundtrackPatch!
  rowId: Int!
}

"""All input for the `updateSoundtrack` mutation."""
input UpdateSoundtrackInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Soundtrack` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Soundtrack` being updated.
  """
  soundtrackPatch: SoundtrackPatch!
}

"""The output of our update `Soundtrack` mutation."""
type UpdateSoundtrackPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Soundtrack` that was updated by this mutation."""
  soundtrack: Soundtrack

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Soundtrack`. May be used by Relay 1."""
  soundtrackEdge(
    """The method to use when ordering `Soundtrack`."""
    orderBy: [SoundtracksOrderBy!] = [PRIMARY_KEY_ASC]
  ): SoundtracksEdge
}

"""All input for the `updateTrackByRowId` mutation."""
input UpdateTrackByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Track` being updated.
  """
  trackPatch: TrackPatch!
  rowId: Int!
}

"""All input for the `updateTrack` mutation."""
input UpdateTrackInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Track` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Track` being updated.
  """
  trackPatch: TrackPatch!
}

"""The output of our update `Track` mutation."""
type UpdateTrackPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Track` that was updated by this mutation."""
  track: Track

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Soundtrack` that is related to this `Track`."""
  soundtrackBySoundtrackId: Soundtrack

  """An edge for our `Track`. May be used by Relay 1."""
  trackEdge(
    """The method to use when ordering `Track`."""
    orderBy: [TracksOrderBy!] = [PRIMARY_KEY_ASC]
  ): TracksEdge
}

